var root=require("find-parent-dir").sync(__dirname,"package.json");var proxyquire=require("proxyquire").noPreserveCache();var metadata=require(root+"lib/metadata");var expect=require("expect.js");var Joi=require("joi");describe("cli/metadata",function(){it("should ignore .DS_STORE files",function(a){var b=proxyquire(root+"lib/metadata",{file:{walkSync:function(d,c){c("/",[],[".DS_Store"])}}});b(function(c){expect(c).to.be.an("array");expect(c).to.have.length(0);a()})});it("should throw on malformed metadata",function(){var a=proxyquire(root+"lib/metadata",{fs:{readFileSync:function(){return"/*! { !*/"}}});expect(a).to.throwException(/Error Parsing Metadata/)});it("should not throw when metadata is missing",function(){var a=proxyquire(root+"lib/metadata",{fs:{readFileSync:function(){return"sup dude"}}});expect(a).to.not.throwException(/Error Parsing Metadata/)});it("should throw on malformed deps",function(){var a=proxyquire(root+"lib/metadata",{fs:{readFileSync:function(){return"define([[],"}}});expect(a).to.throwException(/Couldn't parse dependencies/)});it("should throw if we can't find the define",function(){var a=proxyquire(root+"lib/metadata",{fs:{readFileSync:function(){return"defin([]),"}}});expect(a).to.throwException(/Couldn't find the define/)});it("should use amdPath as a fallback for name",function(){var b=proxyquire(root+"lib/metadata",{file:{walkSync:function(d,c){c("/",[],["fakeDetect.js"])}},fs:{readFileSync:function(){return'/*! { "property": "fake"}!*/ define([],'}}});var a=b();expect(a.name).to.equal(a.amdPath)});it("should throw if we can't find the define",function(){var a=proxyquire(root+"lib/metadata",{fs:{readFileSync:function(){return'/*! { "polyfills": ["fake"]}!*/ define([],'}}});expect(a).to.throwException(/Polyfill not found/)});it("should throw if we can't find the define",function(){var b=proxyquire(root+"lib/metadata",{fs:{readFileSync:function(){return'/*! { "property": "fake", "cssclass": "realFake"}!*/ define([],'}}});var a=b()[0];expect(a.cssclass).to.be(null)});it("should rename `docs` to `doc` when found",function(){var b=proxyquire(root+"lib/metadata",{fs:{readFileSync:function(){return'/*! { "docs": "originally docs" }!*/ define([],'}}});var a=b()[0];expect(a.docs).to.be(undefined);expect(a.doc).to.match(/originally docs/)});it("returns a json blob when invoked without callback",function(){expect(metadata()).to.be.an("array")});it("return nothing when given a callback",function(){expect(metadata(function a(){})).to.be(undefined)});it("pass the json blob when given a callback",function(a){metadata(function(b){expect(b).to.be.an("array");a()})});describe("returns an array of valid objects",function(){var a=Joi.object().keys({amdPath:Joi.string().required(),name:Joi.string().required(),path:Joi.string().required(),doc:Joi.alternatives()["try"](Joi.string(),null),caniuse:Joi.alternatives()["try"](Joi.string(),null),async:Joi["boolean"](),aliases:Joi.array().items(Joi.string()),builderAliases:Joi.array().items(Joi.string()),knownBugs:Joi.array().items(Joi.string()),warnings:Joi.array().items(Joi.string()),authors:Joi.array().items(Joi.string()),tags:Joi.array().items(Joi.string()),deps:Joi.array().items(Joi.string()),notes:Joi.array().items(Joi.object().keys({name:Joi.string().required(),href:Joi.string().required()})).unique(),cssclass:Joi.alternatives()["try"](Joi.string().lowercase(),Joi.array().items(Joi.string().lowercase())).required(),property:Joi.alternatives()["try"](Joi.string().lowercase(),Joi.array().items(Joi.string().lowercase())).required(),polyfills:Joi.array().items(Joi.object().keys({name:Joi.string().required(),authors:Joi.array().items(Joi.string()),notes:Joi.array().items(Joi.string()),href:Joi.string().required(),licenses:Joi.array().items(Joi.string()).required()})).unique()});metadata(function(b){b.forEach(function(d){var c=a.validate(d).error;it("for "+d.name,function(){expect(c).to.be(null)})})})})});