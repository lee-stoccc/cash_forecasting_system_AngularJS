describe("testRunner",function(){var c={};var a;var b;before(function(d){b=requirejs.config({context:Math.random().toString().slice(2),baseUrl:"../src",paths:{cleanup:"../test/cleanup"}});define("Modernizr",[],function(){return c});define("tests",[],function(){return[{name:"fakeFn",fn:function(){return true}},{name:"fakeBool",fn:false},{name:"newFakeDetect",fn:function(){return 10},options:{aliases:["fakeDetect"]}},{name:"fake",fn:true},{name:"fake.detect",fn:99},{name:"fakeBoolDeep",fn:new Boolean(true)},{name:"fakeBoolDeep.detect",fn:false},{fn:function(){return !!"async test"}}]});b(["testRunner","cleanup"],function(f,e){f();a=e;d()})});it("returns true if fn returns true",function(){expect("fakefn" in c).to.be(true)});it("returns true if fn is a bool",function(){expect(c.fakebool).to.be(false)});it("assigns aliased values",function(){expect(c.newfakedetect).to.equal(c.fakedetect)});it("deep assignments are valid",function(){expect(c.fake.detect).to.equal(99)});it("deep assignments are true with bool base",function(){expect(c.fakebooldeep instanceof Boolean).to.be(true);expect(c.fakebooldeep.detect).to.equal(false)});afterEach(function(){b.undef("testRunner");b.undef("Modernizr")});after(function(){a()})});