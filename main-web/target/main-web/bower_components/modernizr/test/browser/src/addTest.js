describe("addTest",function(){var g;var c;var f;var b;var d;var a;var e;before(function(h){e=requirejs.config({context:Math.random().toString().slice(2),baseUrl:"../src",paths:{cleanup:"../test/cleanup",sinon:"../test/js/lib/sinon"}});e(["cleanup","sinon"],function(i,j){d=i;a=j;h()})});beforeEach(function(h){g={};f={_q:[],_config:{}};c=a.spy();define("ModernizrProto",[],function(){return g});define("Modernizr",[],function(){return f});define("setClasses",[],function(){return c});define("package",[],function(){return{}});e(["addTest"],function(i){b=i;h()})});afterEach(function(){e.undef("ModernizrProto");e.undef("setClasses");e.undef("Modernizr");e.undef("package");e.undef("addTest")});describe("setup",function(){it("adds an object for test listeners",function(){expect(g._l).to.be.an("object")});it("should define the `ModernizrProto._trigger` function",function(){expect(g._trigger).to.be.an("function")});it("should push the Modernizr.addTest definition to the `_q`",function(){expect(f._q).to.have.length(1);expect(f._q[0]).to.be.a("function")});it("should define Modernizr.addTest at the end of the _q",function(){f._q[0]();expect(g.addTest).to.be(b)})});describe("Modernizr.on",function(){var h=function(){};it("keeps track of requests",function(){g.on("fakeDetect",h);expect(g._l.fakeDetect).to.be.an("array");expect(g._l.fakeDetect[0]).to.be(h)});it("does not recreate the queue with duplicate requests",function(){g.on("fakeDetect",h);g.on("fakeDetect",h);expect(g._l.fakeDetect.length).to.be(2)});it("triggers results if the detect already ran",function(i){f.fakeDetect="fake";f._trigger=a.spy();g.on("fakeDetect",h);setTimeout(function(){expect(f._trigger.calledOnce).to.be(true);expect(f._trigger.calledWith("fakeDetect",f.fakeDetect)).to.be(true);i()},0)})});describe("Modernizr._trigger",function(){it("skips the callback if it does not exist",function(){expect(function(){g._trigger("fakeDetect")}).to.not.throwError()});it("runs the listener calledback if it does exist",function(h){var i=a.spy();g.on("fakeDetect",i);g._trigger("fakeDetect","fakeRes");setTimeout(function(){expect(i.calledOnce).to.be(true);h()})});it("deletes the listener after it runs",function(h){g.on("fakeDetect",function(){});expect(g._l.fakeDetect).to.be.an("array");g._trigger("fakeDetect","fakeRes");setTimeout(function(){expect(g._l.fakeDetect).to.be(undefined);h()})})});describe("Modernizr.addTest",function(){beforeEach(function(){f._trigger=a.spy();f._trigger=a.spy();expect(f.fakedetect).to.be(undefined);expect(f.fake).to.be(undefined);expect(f.detect).to.be(undefined)});it("sets the proper bool on the Modernizr object with a function",function(){b("fakedetect",function(){return true});expect(f.fakedetect).to.be(true)});it("sets the proper bool on the Modernizr object with a bool",function(){b("fakedetect",false);expect(f.fakedetect).to.be(false)});it("does not cast to a bool on the Modernizr object with a truthy value",function(){b("fakedetect",function(){return 100});expect(f.fakedetect).to.be(100)});it("sets a true class for a true value",function(){b("fakedetect",function(){return 100});expect(c.callCount).to.be(1);expect(c.calledWith(["fakedetect"])).to.be(true)});it("sets a truthy class for a truthy value",function(){b("fakedetect",function(){return 100});expect(c.callCount).to.be(1);expect(c.calledWith(["fakedetect"])).to.be(true)});it("sets a negative class for a false value",function(){b("fakedetect",function(){return false});expect(c.callCount).to.be(1);expect(c.calledWith(["no-fakedetect"])).to.be(true)});it("sets a negative class for a falsey value",function(){b("fakedetect",function(){return undefined});expect(c.callCount).to.be(1);expect(c.calledWith(["no-fakedetect"])).to.be(true)});it("does not cast to a bool on the Modernizr object with a falsy value",function(){b("fakedetect",function(){return undefined});expect("fakedetect" in f).to.be(true);expect(f.fakedetect).to.be(undefined)});it("forces detect names are lowercase",function(){b("FaKeDeTeCt",true);expect(f.fakedetect).to.be(true)});it("supports nested properties with a bool base",function(){b("fake",new Boolean(true));b("fake.detect",true);expect(f.fake).to.be.an("object");expect(f.fake.detect).to.be(true)});it("supports nested properties",function(){b("fake",true);b("fake.detect",true);expect(f.fake).to.be.an("object");expect(f.fake.detect).to.be(true)});it("does not overwrite values once they are set",function(){b("fakeDetect",false);expect(f.fakedetect).to.be(false);expect(f._trigger.calledOnce).to.be(true);b("fakeDetect",true);expect(f.fakedetect).to.be(false);expect(f._trigger.calledOnce).to.be(true)});it("allows feature to be an object of features",function(){b({fake:true,detect:false});expect(f.fake).to.be(true);expect(f.detect).to.be(false);expect(c.callCount).to.be(2);expect(c.calledWith(["fake"])).to.be(true);expect(c.calledWith(["no-detect"])).to.be(true)});it("properly filters out monkey patched object properties",function(){var i=function(){};Object.prototype.MOD_FAKE_VALUE=i;var h={detect:false};expect(h.MOD_FAKE_VALUE).to.be(i);b(h);delete Object.prototype.MOD_FAKE_VALUE;expect(f.MOD_FAKE_VALUE).to.be(undefined);expect(f.mod_fake_value).to.be(undefined);expect(f.detect).to.be(false);expect(c.callCount).to.be(1)});it("returns an instance of Modernizr for chaining",function(){expect(b("fakeDetect",true)).to.be(f)})});after(function(){d()})});