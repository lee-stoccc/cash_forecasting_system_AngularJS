var browsers=require("./test/browser/sauce-browsers.json");var serveStatic=require("serve-static");module.exports=function(c){require("load-grunt-tasks")(c);var b=c.file.expand(["test/universal/**/*.js","test/browser/**/*.js","!test/browser/setup.js","!test/browser/integration/*.js"]);c.initConfig({env:{nodeTests:["test/universal/**/*.js","test/node/**/*.js"],browserTests:b,coverage:{APP_DIR_FOR_CODE_COVERAGE:"test/coverage/instrument",urls:["http://localhost:9999/test/unit.html","http://localhost:9999/test/index.html"]}},generate:{dest:"./dist/modernizr-build.js"},copy:{"gh-pages":{files:[{expand:true,src:["./**/*","!./test/coverage/**","!./node_modules/*grunt-*/**","!./node_modules/**/node_modules/**"],dest:"gh-pages"}]}},jscs:{src:["Gruntfile.js","src/*.js","lib/*.js","test/**/*.js","feature-detects/**/*.js","!src/html5printshiv.js","!test/coverage/**/*.js","!test/js/lib/**/*.js","!src/html5shiv.js"]},jshint:{options:{jshintrc:true,ignores:["src/html5printshiv.js","src/html5shiv.js"]},files:["Gruntfile.js","src/*.js","lib/*.js","feature-detects/**/*.js"],tests:{options:{jshintrc:true},files:{src:["<%= env.nodeTests%>","<%= env.browserTests %>","test/browser/setup.js","test/browser/integration/*.js"]}}},clean:{dist:["dist","test/coverage","test/*.html","gh-pages"]},jade:{compile:{options:{data:{unitTests:b,integrationTests:c.file.expand(["test/browser/integration/*.js"])}},files:{"test/unit.html":"test/browser/unit.jade","test/iframe.html":"test/browser/iframe.jade","test/index.html":"test/browser/integration.jade"}}},connect:{server:{options:{middleware:function(){return[function(i,g,h){var f=i.headers["user-agent"];if(i.url=="/coverage/client"&&i.method=="POST"){var e=encodeURI(f.replace(/\//g,"-"));var d="";i.on("data",function(j){d=d+j});i.on("end",function(){c.file.write("test/coverage/reports/"+e+".json",d);g.end()});return}if(i.url.match(/^\/(src|lib)\//)){i.url="/test/coverage/instrument"+i.url}h()},serveStatic(__dirname)]},port:9999}}},"saucelabs-custom":{all:{options:{urls:"<%= env.coverage.urls %>",testname:process.env.CI_BUILD_NUMBER||"Modernizr Test",browsers:browsers,maxRetries:3}}},mocha:{test:{options:{urls:"<%= env.coverage.urls %>",log:true},},},mochaTest:{test:{options:{reporter:"dot"},src:["<%= env.nodeTests%>"]}},instrument:{files:["src/**/*.js","lib/**/*.js"],options:{basePath:"test/coverage/instrument/"}},storeCoverage:{options:{dir:"test/coverage/reports"}},makeReport:{src:"test/coverage/reports/**/*.json",options:{type:"lcov",dir:"test/coverage/reports",print:"detail"}},coveralls:{all:{src:"test/coverage/reports/lcov.info",options:{force:true}}}});c.registerMultiTask("generate","Create a version of Modernizr from Grunt",function(){var d=this.async();var f=require("./lib/config-all");var g=require("./lib/cli");var e=this.data;g.build(f,function(h){c.file.write(e,h);d()})});c.registerTask("nodeTests",["mochaTest"]);c.registerTask("browserTests",["connect","mocha"]);c.registerTask("build",["clean","generate"]);c.registerTask("lint",["jshint","jscs"]);c.registerTask("default",["lint","build"]);var a=["clean","lint","jade","instrument","env:coverage","nodeTests"];if(process.env.APPVEYOR){c.registerTask("test",a)}else{if(process.env.BROWSER_COVERAGE!=="true"){c.registerTask("test",a.concat(["generate","browserTests"]))}else{c.registerTask("test",a.concat(["generate","storeCoverage","browserTests","saucelabs-custom","makeReport","coveralls"]))}}};